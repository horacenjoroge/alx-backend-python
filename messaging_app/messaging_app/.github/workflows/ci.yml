name: CI - Django Tests

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root_password
          MYSQL_DATABASE: test_messaging_db
          MYSQL_USER: test_user
          MYSQL_PASSWORD: test_password
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -h localhost"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r messaging_app/requirements.txt
        pip install pytest pytest-django pytest-cov mysqlclient flake8 coverage
    
    - name: Run flake8 linting
      run: |
        cd messaging_app
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Check code quality with flake8 (strict)
      run: |
        cd messaging_app
        # Fail build if there are Python syntax errors or undefined names
        flake8 chats/ --count --select=E9,F63,F7,F82 --show-source --statistics --exclude=migrations
        # Fail build on other linting errors (more lenient)
        flake8 chats/ --count --max-line-length=127 --statistics --exclude=migrations --exit-zero
    
    - name: Wait for MySQL to be ready
      run: |
        for i in {1..30}; do
          if mysqladmin ping -h 127.0.0.1 -u test_user -ptest_password --silent; then
            echo "MySQL is ready!"
            break
          fi
          echo "Waiting for MySQL... ($i/30)"
          sleep 2
        done
    
    - name: Set up test database
      env:
        DB_NAME: test_messaging_db
        DB_USER: test_user
        DB_PASSWORD: test_password
        DB_HOST: 127.0.0.1
        DB_PORT: 3306
      run: |
        cd messaging_app
        python manage.py makemigrations --noinput
        python manage.py migrate --noinput
    
    - name: Run tests with coverage
      env:
        DB_NAME: test_messaging_db
        DB_USER: test_user
        DB_PASSWORD: test_password
        DB_HOST: 127.0.0.1
        DB_PORT: 3306
        DJANGO_SETTINGS_MODULE: messaging_app.settings
      run: |
        cd messaging_app
        coverage run -m pytest --verbose --junit-xml=test-results.xml
        coverage report -m
        coverage xml
        coverage html
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results
        path: messaging_app/test-results.xml
    
    - name: Upload coverage reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: coverage-reports
        path: |
          messaging_app/htmlcov/
          messaging_app/coverage.xml
    
    - name: Display coverage summary
      if: always()
      run: |
        cd messaging_app
        echo "=== Coverage Summary ==="
        coverage report -m || true