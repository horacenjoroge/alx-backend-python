{
	"info": {
		"_postman_id": "12345678-1234-5678-9012-123456789abc",
		"name": "Messaging App API Tests",
		"description": "Complete API testing collection for the Django Messaging App with JWT Authentication",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Authentication",
			"item": [
				{
					"name": "Register New User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"User created successfully\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('user_id');",
									"    pm.expect(jsonData).to.have.property('email');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"testuser1@example.com\",\n    \"email\": \"testuser1@example.com\",\n    \"first_name\": \"Test\",\n    \"last_name\": \"User1\",\n    \"password\": \"testpassword123\",\n    \"password_confirm\": \"testpassword123\",\n    \"role\": \"guest\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/users/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Register Second User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"User created successfully\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('user_id');",
									"    pm.expect(jsonData).to.have.property('email');",
									"    pm.globals.set(\"user2_id\", jsonData.user_id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"testuser2@example.com\",\n    \"email\": \"testuser2@example.com\",\n    \"first_name\": \"Test\",\n    \"last_name\": \"User2\",\n    \"password\": \"testpassword123\",\n    \"password_confirm\": \"testpassword123\",\n    \"role\": \"guest\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/users/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Login User 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Token received\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('access');",
									"    pm.expect(jsonData).to.have.property('refresh');",
									"    pm.globals.set(\"access_token_user1\", jsonData.access);",
									"    pm.globals.set(\"refresh_token_user1\", jsonData.refresh);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"testuser1@example.com\",\n    \"password\": \"testpassword123\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/auth/login/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"auth",
								"login",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Login User 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Token received\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('access');",
									"    pm.expect(jsonData).to.have.property('refresh');",
									"    pm.globals.set(\"access_token_user2\", jsonData.access);",
									"    pm.globals.set(\"refresh_token_user2\", jsonData.refresh);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"testuser2@example.com\",\n    \"password\": \"testpassword123\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/auth/login/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"auth",
								"login",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Token is valid\", function () {",
									"    pm.response.to.not.have.jsonBody(\"detail\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"token\": \"{{access_token_user1}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/auth/verify/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"auth",
								"verify",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Refresh Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"New access token received\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('access');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"refresh\": \"{{refresh_token_user1}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/auth/refresh/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"auth",
								"refresh",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "User Management",
			"item": [
				{
					"name": "Get Current User Profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"User profile returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('email');",
									"    pm.expect(jsonData).to.have.property('first_name');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token_user1}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/users/me/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users",
								"me",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "List All Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Users list returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('results');",
									"    pm.expect(jsonData.results).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token_user1}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/users/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Conversations",
			"item": [
				{
					"name": "Create Conversation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Conversation created successfully\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('conversation_id');",
									"    pm.expect(jsonData).to.have.property('participants');",
									"    pm.globals.set(\"conversation_id\", jsonData.conversation_id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token_user1}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{base_url}}/api/conversations/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"conversations",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Participant to Conversation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Participant added successfully\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('message');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token_user1}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"user_id\": \"{{user2_id}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/conversations/{{conversation_id}}/add-participant/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"conversations",
								"{{conversation_id}}",
								"add-participant",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User Conversations",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Conversations list returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('results');",
									"    pm.expect(jsonData.results).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token_user1}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/conversations/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"conversations",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Specific Conversation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Conversation details returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('conversation_id');",
									"    pm.expect(jsonData).to.have.property('participants');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token_user1}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/conversations/{{conversation_id}}/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"conversations",
								"{{conversation_id}}",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Messages",
			"item": [
				{
					"name": "Send Message",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Message sent successfully\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('message_id');",
									"    pm.expect(jsonData).to.have.property('message_body');",
									"    pm.globals.set(\"message_id\", jsonData.message_id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token_user1}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"conversation\": \"{{conversation_id}}\",\n    \"recipient\": \"{{user2_id}}\",\n    \"message_body\": \"Hello! This is a test message from User 1.\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/messages/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"messages",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Send Reply Message",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Reply message sent successfully\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('message_id');",
									"    pm.expect(jsonData).to.have.property('message_body');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token_user2}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"conversation\": \"{{conversation_id}}\",\n    \"recipient\": \"{{user1_id}}\",\n    \"message_body\": \"Hi there! This is a reply from User 2.\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/messages/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"messages",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Messages",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Messages list returned with pagination\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('results');",
									"    pm.expect(jsonData).to.have.property('count');",
									"    pm.expect(jsonData.results).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token_user1}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/messages/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"messages",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Messages with Pagination",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Paginated messages returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('results');",
									"    pm.expect(jsonData).to.have.property('count');",
									"    pm.expect(jsonData).to.have.property('current_page');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token_user1}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/messages/?page=1&page_size=10",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"messages",
								""
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "page_size",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Filter Messages by Conversation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Filtered messages returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('results');",
									"    pm.expect(jsonData.results).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token_user1}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/messages/?conversation={{conversation_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"messages",
								""
							],
							"query": [
								{
									"key": "conversation",
									"value": "{{conversation_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search Messages by Content",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Search results returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('results');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token_user1}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/messages/?search=test",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"messages",
								""
							],
							"query": [
								{
									"key": "search",
									"value": "test"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Security Tests",
			"item": [
				{
					"name": "Access Conversations Without Token (Should Fail)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401 (Unauthorized)\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Authentication required error returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('detail');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/conversations/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"conversations",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Access Messages Without Token (Should Fail)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401 (Unauthorized)\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Authentication required error returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('detail');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/messages/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"messages",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Send Message to Wrong Conversation (Should Fail)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403 or 400 (Forbidden or Bad Request)\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([400, 403, 404]);",
									"});",
									"",
									"pm.test(\"Error message returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('error');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token_user1}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"conversation\": \"00000000-0000-0000-0000-000000000000\",\n    \"recipient\": \"{{user2_id}}\",\n    \"message_body\": \"This should fail - wrong conversation ID\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/messages/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"messages",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Login with Invalid Credentials (Should Fail)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401 (Unauthorized)\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Invalid credentials error returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('detail');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"wrong@example.com\",\n    \"password\": \"wrongpassword\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/auth/login/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"auth",
								"login",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Advanced Features",
			"item": [
				{
					"name": "Filter Messages by Date Range",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Date filtered messages returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('results');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token_user1}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/messages/?sent_at_after=2024-01-01T00:00:00Z&sent_at_before=2024-12-31T23:59:59Z",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"messages",
								""
							],
							"query": [
								{
									"key": "sent_at_after",
									"value": "2024-01-01T00:00:00Z"
								},
								{
									"key": "sent_at_before",
									"value": "2024-12-31T23:59:59Z"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get My Sent Messages",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"My sent messages returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('results');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token_user1}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/messages/my-messages/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"messages",
								"my-messages",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Get My Received Messages",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"My received messages returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('results');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token_user1}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/messages/received-messages/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"messages",
								"received-messages",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Leave Conversation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Left conversation successfully\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('message');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token_user2}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/conversations/{{conversation_id}}/leave/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"conversations",
								"{{conversation_id}}",
								"leave",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout (Blacklist Token)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Token blacklisted successfully\", function () {",
									"    // Token should now be invalid for future requests",
									"    pm.globals.unset(\"access_token_user1\");",
									"    pm.globals.unset(\"refresh_token_user1\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"refresh\": \"{{refresh_token_user1}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/auth/logout/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"auth",
								"logout",
								""
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:8000",
			"type": "string"
		},
		{
			"key": "access_token_user1",
			"value": "",
			"type": "string"
		},
		{
			"key": "access_token_user2",
			"value": "",
			"type": "string"
		},
		{
			"key": "refresh_token_user1",
			"value": "",
			"type": "string"
		},
		{
			"key": "refresh_token_user2",
			"value": "",
			"type": "string"
		},
		{
			"key": "conversation_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "message_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "user1_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "user2_id",
			"value": "",
			"type": "string"
		}
	]
}